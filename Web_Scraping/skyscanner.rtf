{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl380\partightenfactor0

\f0\fs27\fsmilli13600 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import pandas as pd\
import requests\
import json\
\
\
# Change <introduce your RapidAPI key here>\
\
def city_code(city_name):\
    url = "https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/autosuggest/v1.0/US/USD/en-US/"\
\
    params = \{"query": city_name\}\
    \
    # Change <introduce your RapidAPI key here>\
    headers = \{'x-rapidapi-host': "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com",\
                      'x-rapidapi-key': "<introduce your RapidAPI key here>"\}\
\
    response = requests.get(url, headers = headers, params = params)\
\
    return response.json()["Places"][0]["PlaceId"]\
\
\
# In[ ]:\
\
\
# Change <introduce your RapidAPI key here>\
\
\
def flight_prices(departure, arrival, date):\
\
    departure_code = city_code(departure)\
    arrival_code = city_code(arrival)\
    url = f"https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browsequotes/v1.0/US/USD/en-US/\{departure_code\}/\{arrival_code\}/\{date\}"\
\
    params = \{"inboundpartialdate":\{date\}\}\
\
    # Change <introduce your RapidAPI key here>\
    headers = \{\
    'x-rapidapi-host': "skyscanner-skyscanner-flight-search-v1.p.rapidapi.com",\
    'x-rapidapi-key': "<introduce your RapidAPI key here>"\}\
\
    response = requests.get(url, headers=headers, params=params)\
\
    return response.json()\
\
def get_dates(start, end):\
    return pd.Series(pd.date_range(start, end,freq='d').format())\
\
\
def flight_days(origin, destination, start, end):\
    dates = get_dates(start, end)\
    return \{date:flight_prices(origin, destination, date) for date in dates\}\
\
\
def lowest_price_data(origin, destination, start, end):\
    data_flight = flight_days(origin, destination, start, end)\
    \
    \
    df_flight_dates = pd.DataFrame()\
    df_carriers = pd.DataFrame()\
    df_places = pd.DataFrame()\
    \
    \
    for day in data_flight.keys():\
        df_flight_dates = df_flight_dates.append(pd.json_normalize(data_flight[day]["Quotes"]))\
        df_carriers = df_carriers.append(pd.json_normalize(data_flight[day]['Carriers'])).drop_duplicates()\
        df_places = df_places.append(pd.json_normalize(data_flight[day]['Places'])).drop_duplicates()\
    \
\
    price_cheap_flight = df_flight_dates.loc[(df_flight_dates['MinPrice'] == df_flight_dates['MinPrice'].min()),:]\
    \
    departure_date = price_cheap_flight['QuoteDateTime'].values[0]\
    company_name = df_carriers.loc[(price_cheap_flight['OutboundLeg.CarrierIds'][0][0] == df_carriers['CarrierId']),'Name'].values[0]\
    departure = df_places.loc[(df_places['PlaceId'] == price_cheap_flight['OutboundLeg.OriginId'][0]) ,'Name'].values[0]\
    arrival = df_places.loc[(df_places['PlaceId'] == price_cheap_flight['OutboundLeg.DestinationId'][0]) ,'Name'].values[0]\
\
    \
    return print(f'Departure date: \{departure_date[:10]\} \\nCompany name: \{company_name\} \\nDeparture airport: \{departure\} \\nArrival airport: \{arrival\}')\
\
\
lowest_price_data('New York', 'London', '2020-12-20', '2020-12-22')\
}